/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 book.glb -t -r ./ 
*/

import * as THREE from 'three'
import React, { useRef, forwardRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Group } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    book_a_0: THREE.Mesh
  }
  materials: {
    book_a: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

type Props = JSX.IntrinsicElements['group'] & {
  link?: string;
};

export const Book = forwardRef<Group, Props>(({ link = 'https://www.amazon.com/Laws-Human-Nature-Robert-Greene/dp/0525428143', ...props }, ref) => {
  const [isHovered, setIsHovered] = useState(false);
  const { nodes, materials } = useGLTF('models/book.glb') as GLTFResult
  return (
    <group ref={ref} {...props} dispose={null} onClick={(e) => { e.stopPropagation(); window.open(link, '_blank'); }}>
      <mesh geometry={nodes.book_a_0.geometry} material={materials.book_a} position={isHovered ? [11.037, 0, -8.03] : [10.037, 0, -7.03]} scale={isHovered ? 1.1 : 1}
        castShadow receiveShadow onPointerEnter={(event) => (event.stopPropagation(), setIsHovered(true))}
        onPointerLeave={() => setIsHovered(false)} />
    </group>
  )
});

useGLTF.preload('models/book.glb')
